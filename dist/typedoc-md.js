"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const types = {
    Function: 64,
    Interface: 256,
    Property: 1024
};
class DocGenerator {
    constructor(cfg) {
        this.cwd = cfg.cwd;
        this.urlBase = cfg.urlBase;
        this.linkTable = {};
    }
    getPath(absPath) {
        return path.relative(this.cwd, absPath)
            .replace(/\\/g, '/')
            .replace(/\.[^\.]*$/, '.md');
    }
    getSignatureCode(meta) {
        if (!meta) {
            return [];
        }
        const resultType = this.type(meta.type, false);
        return [
            '```typescript',
            `(${this.args(meta.parameters)}) => ${resultType}`,
            '```'
        ];
    }
    signature(meta) {
        const name = meta.name;
        const typeArgs = this.typeParam(meta.typeParameter);
        let lines = [
            `Function [${name + typeArgs}]`,
            '===',
            '',
            'Signature',
            '---'
        ];
        lines = lines.concat(this.getSignatureCode(meta));
        lines.push('');
        if (meta.comment) {
            lines = lines.concat([
                'Description',
                '---',
                meta.comment.shortText,
                ''
            ]);
        }
        lines = lines.concat(this.params(meta.parameters));
        return lines.join('\n');
    }
    params(meta) {
        if (!meta || meta.length === 0) {
            return [];
        }
        let lines = [
            'Parameters',
            '---'
        ];
        lines = lines.concat(meta.map(param => {
            const desc = param.comment
                ? ` - ${param.comment.text}`
                : '';
            return `- **${param.name}**: ${this.type(param.type)}` + desc;
        }));
        return lines;
    }
    args(meta) {
        if (!meta || meta.length === 0) {
            return '';
        }
        return meta
            .map(arg => `${arg.name}: ${this.type(arg.type, false)}`)
            .join(', ');
    }
    interface(meta) {
        let lines = [];
        if (meta.id) {
            lines.push(`<a name="id-${meta.id}"></a>`);
        }
        lines.push(`Interface [${meta.name}]`, '===', '');
        if (meta.signatures) {
            lines.push('Signature', '---', ...this.getSignatureCode(meta.signatures[0]));
        }
        if (meta.children && meta.children.length > 0) {
            const props = meta.children.filter(prop => prop.kind = types.Property);
            lines.push('Propeties:', '---');
            lines = lines.concat(props.map(prop => {
                return `- ${prop.name}: ${this.type(prop.type)}`;
            }));
            lines.push('');
        }
        return lines.join('\n');
    }
    ref(refData, text) {
        const path = this.getPath(refData.place);
        const hash = 'id-' + refData.meta.id;
        const url = [this.urlBase, path, '#', hash].join('');
        return `[${text}](${url})`;
    }
    type(meta, allowLinks = true) {
        let res = meta.name;
        if (meta.typeArguments && meta.typeArguments.length > 0) {
        }
        if (allowLinks && meta.type === 'reference' && meta.id) {
            const ref = this.linkTable[meta.id];
            res = this.ref(ref, res);
        }
        return res;
    }
    typeParam(meta) {
        if (!meta || meta.length === 0) {
            return '';
        }
        const typeList = meta.map(m => m.name).join(', ');
        return `\\<${typeList}\\>`;
    }
    any(meta) {
        switch (meta.kind) {
            case types.Function:
                return this.signature(meta.signatures[0]);
            case types.Interface:
                return this.interface(meta);
        }
    }
    genDocs(meta) {
        meta.children.forEach(module => {
            module.children
                .forEach(item => {
                if (item.id) {
                    this.linkTable[item.id] = {
                        meta: item,
                        place: module.originalName
                    };
                }
            });
        });
        return meta.children.map(module => ({
            path: this.getPath(module.originalName),
            content: module.children
                .map(item => this.any(item))
                .join('\n\n')
        }));
    }
}
exports.DocGenerator = DocGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWRvYy1tZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90eXBlZG9jLW1kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBRTdCLE1BQU0sS0FBSyxHQUFHO0lBQ1YsUUFBUSxFQUFFLEVBQUU7SUFDWixTQUFTLEVBQUUsR0FBRztJQUNkLFFBQVEsRUFBRSxJQUFJO0NBQ2pCLENBQUE7QUFpQkQ7SUFLSSxZQUFhLEdBQWM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTyxDQUFDLE9BQWU7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7YUFDbEMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7YUFDbkIsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsSUFBSTtRQUNqQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDUixNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ2QsQ0FBQztRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQyxNQUFNLENBQUM7WUFDSCxlQUFlO1lBQ2YsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxVQUFVLEVBQUU7WUFDbEQsS0FBSztTQUNSLENBQUE7SUFDTCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQUk7UUFDVixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3BELElBQUksS0FBSyxHQUFHO1lBQ1IsYUFBYSxJQUFJLEdBQUcsUUFBUSxHQUFHO1lBQy9CLEtBQUs7WUFDTCxFQUFFO1lBQ0YsV0FBVztZQUNYLEtBQUs7U0FDUixDQUFDO1FBQ0YsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNmLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQ2pCLGFBQWE7Z0JBQ2IsS0FBSztnQkFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7Z0JBQ3RCLEVBQUU7YUFDTCxDQUFDLENBQUM7UUFDUCxDQUFDO1FBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUk7UUFDUCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNkLENBQUM7UUFDRCxJQUFJLEtBQUssR0FBRztZQUNSLFlBQVk7WUFDWixLQUFLO1NBQ1IsQ0FBQztRQUNGLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSztZQUMvQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsT0FBTztrQkFDcEIsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtrQkFDMUIsRUFBRSxDQUFDO1lBQ1QsTUFBTSxDQUFDLE9BQU8sS0FBSyxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNsRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ0osTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsSUFBSSxDQUFDLElBQUk7UUFDSixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNkLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSTthQUNOLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDO2FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQUk7UUFDVixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNWLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBQ0QsS0FBSyxDQUFDLElBQUksQ0FDTixjQUFjLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFDMUIsS0FBSyxFQUNMLEVBQUUsQ0FDTCxDQUFDO1FBQ0YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbEIsS0FBSyxDQUFDLElBQUksQ0FDTixXQUFXLEVBQ1gsS0FBSyxFQUNMLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDL0MsQ0FBQztRQUNOLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZFLEtBQUssQ0FBQyxJQUFJLENBQ04sWUFBWSxFQUNaLEtBQUssQ0FDUixDQUFDO1lBQ0YsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJO2dCQUMvQixNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7WUFDcEQsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNKLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBa0IsRUFBRSxJQUFJO1FBQ3hCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sSUFBSSxHQUFHLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNyQyxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLElBQUksSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsR0FBQyxJQUFJO1FBQ3RCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUM7UUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFJO1FBQ1YsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDZCxDQUFDO1FBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsTUFBTSxRQUFRLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBRUQsR0FBRyxDQUFDLElBQUk7UUFDSixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoQixLQUFLLEtBQUssQ0FBQyxRQUFRO2dCQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxLQUFLLEtBQUssQ0FBQyxTQUFTO2dCQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFJO1FBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUN4QixNQUFNLENBQUMsUUFBUTtpQkFDVixPQUFPLENBQUMsSUFBSTtnQkFDVCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDVixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRzt3QkFDdEIsSUFBSSxFQUFFLElBQUk7d0JBQ1YsS0FBSyxFQUFFLE1BQU0sQ0FBQyxZQUFZO3FCQUM3QixDQUFDO2dCQUNOLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNWLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDO1lBQ2hDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDdkMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxRQUFRO2lCQUNuQixHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzNCLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDO0NBQ0o7QUFyS0Qsb0NBcUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcclxuXHJcbmNvbnN0IHR5cGVzID0ge1xyXG4gICAgRnVuY3Rpb246IDY0LFxyXG4gICAgSW50ZXJmYWNlOiAyNTYsXHJcbiAgICBQcm9wZXJ0eTogMTAyNFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlZlJlY29yZCB7XHJcbiAgICBtZXRhOiBhbnk7XHJcbiAgICBwbGFjZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERvY0dlbkNmZyB7XHJcbiAgICBjd2Q6IHN0cmluZztcclxuICAgIHVybEJhc2U6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEb2NFbnRpdHkge1xyXG4gICAgY29udGVudDogc3RyaW5nO1xyXG4gICAgcGF0aDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRG9jR2VuZXJhdG9yIHtcclxuICAgIGxpbmtUYWJsZToge1trZXk6IHN0cmluZ106IFJlZlJlY29yZH07XHJcbiAgICBjd2Q6IHN0cmluZztcclxuICAgIHVybEJhc2U6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAoY2ZnOiBEb2NHZW5DZmcpIHtcclxuICAgICAgICB0aGlzLmN3ZCA9IGNmZy5jd2Q7XHJcbiAgICAgICAgdGhpcy51cmxCYXNlID0gY2ZnLnVybEJhc2U7XHJcbiAgICAgICAgdGhpcy5saW5rVGFibGUgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQYXRoKGFic1BhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgucmVsYXRpdmUodGhpcy5jd2QsIGFic1BhdGgpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJylcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLlteXFwuXSokLywgJy5tZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNpZ25hdHVyZUNvZGUobWV0YSkge1xyXG4gICAgICAgIGlmICghbWV0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdFR5cGUgPSB0aGlzLnR5cGUobWV0YS50eXBlLCBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIFsgICAgICAgICAgICBcclxuICAgICAgICAgICAgJ2BgYHR5cGVzY3JpcHQnLFxyXG4gICAgICAgICAgICBgKCR7dGhpcy5hcmdzKG1ldGEucGFyYW1ldGVycyl9KSA9PiAke3Jlc3VsdFR5cGV9YCxcclxuICAgICAgICAgICAgJ2BgYCcgICAgICAgXHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5cclxuICAgIHNpZ25hdHVyZShtZXRhKSB7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IG1ldGEubmFtZTtcclxuICAgICAgICBjb25zdCB0eXBlQXJncyA9IHRoaXMudHlwZVBhcmFtKG1ldGEudHlwZVBhcmFtZXRlcik7XHJcbiAgICAgICAgbGV0IGxpbmVzID0gW1xyXG4gICAgICAgICAgICBgRnVuY3Rpb24gWyR7bmFtZSArIHR5cGVBcmdzfV1gLFxyXG4gICAgICAgICAgICAnPT09JyxcclxuICAgICAgICAgICAgJycsXHJcbiAgICAgICAgICAgICdTaWduYXR1cmUnLFxyXG4gICAgICAgICAgICAnLS0tJ1xyXG4gICAgICAgIF07ICAgIFxyXG4gICAgICAgIGxpbmVzID0gbGluZXMuY29uY2F0KHRoaXMuZ2V0U2lnbmF0dXJlQ29kZShtZXRhKSk7XHJcbiAgICAgICAgbGluZXMucHVzaCgnJyk7XHJcbiAgICAgICAgaWYgKG1ldGEuY29tbWVudCkge1xyXG4gICAgICAgICAgICBsaW5lcyA9IGxpbmVzLmNvbmNhdChbXHJcbiAgICAgICAgICAgICAgICAnRGVzY3JpcHRpb24nLFxyXG4gICAgICAgICAgICAgICAgJy0tLScsXHJcbiAgICAgICAgICAgICAgICBtZXRhLmNvbW1lbnQuc2hvcnRUZXh0LFxyXG4gICAgICAgICAgICAgICAgJycgICAgIFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZXMgPSBsaW5lcy5jb25jYXQodGhpcy5wYXJhbXMobWV0YS5wYXJhbWV0ZXJzKSk7XHJcbiAgICAgICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xcbicpO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcmFtcyhtZXRhKSB7XHJcbiAgICAgICAgaWYgKCFtZXRhIHx8IG1ldGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGxpbmVzID0gW1xyXG4gICAgICAgICAgICAnUGFyYW1ldGVycycsXHJcbiAgICAgICAgICAgICctLS0nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBsaW5lcyA9IGxpbmVzLmNvbmNhdChtZXRhLm1hcChwYXJhbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBwYXJhbS5jb21tZW50XHJcbiAgICAgICAgICAgICAgICA/IGAgLSAke3BhcmFtLmNvbW1lbnQudGV4dH1gXHJcbiAgICAgICAgICAgICAgICA6ICcnO1xyXG4gICAgICAgICAgICByZXR1cm4gYC0gKioke3BhcmFtLm5hbWV9Kio6ICR7dGhpcy50eXBlKHBhcmFtLnR5cGUpfWAgKyBkZXNjO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICByZXR1cm4gbGluZXM7XHJcbiAgICB9XHJcblxyXG4gICAgYXJncyhtZXRhKSB7XHJcbiAgICAgICAgIGlmICghbWV0YSB8fCBtZXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtZXRhXHJcbiAgICAgICAgICAgIC5tYXAoYXJnID0+IGAke2FyZy5uYW1lfTogJHt0aGlzLnR5cGUoYXJnLnR5cGUsIGZhbHNlKX1gKVxyXG4gICAgICAgICAgICAuam9pbignLCAnKTtcclxuICAgIH0gICAgXHJcblxyXG4gICAgaW50ZXJmYWNlKG1ldGEpIHtcclxuICAgICAgICBsZXQgbGluZXMgPSBbXTtcclxuICAgICAgICBpZiAobWV0YS5pZCkge1xyXG4gICAgICAgICAgICBsaW5lcy5wdXNoKGA8YSBuYW1lPVwiaWQtJHttZXRhLmlkfVwiPjwvYT5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluZXMucHVzaChcclxuICAgICAgICAgICAgYEludGVyZmFjZSBbJHttZXRhLm5hbWV9XWAsXHJcbiAgICAgICAgICAgICc9PT0nLFxyXG4gICAgICAgICAgICAnJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKG1ldGEuc2lnbmF0dXJlcykge1xyXG4gICAgICAgICAgICBsaW5lcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgJ1NpZ25hdHVyZScsXHJcbiAgICAgICAgICAgICAgICAnLS0tJyxcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuZ2V0U2lnbmF0dXJlQ29kZShtZXRhLnNpZ25hdHVyZXNbMF0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSAgICAgIFxyXG4gICAgICAgIGlmIChtZXRhLmNoaWxkcmVuICYmIG1ldGEuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wcyA9IG1ldGEuY2hpbGRyZW4uZmlsdGVyKHByb3AgPT4gcHJvcC5raW5kID0gdHlwZXMuUHJvcGVydHkpO1xyXG4gICAgICAgICAgICBsaW5lcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgJ1Byb3BldGllczonLFxyXG4gICAgICAgICAgICAgICAgJy0tLSdcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgbGluZXMgPSBsaW5lcy5jb25jYXQocHJvcHMubWFwKHByb3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAtICR7cHJvcC5uYW1lfTogJHt0aGlzLnR5cGUocHJvcC50eXBlKX1gXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcclxuICAgIH1cclxuXHJcbiAgICByZWYocmVmRGF0YTogUmVmUmVjb3JkLCB0ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aChyZWZEYXRhLnBsYWNlKTtcclxuICAgICAgICBjb25zdCBoYXNoID0gJ2lkLScgKyByZWZEYXRhLm1ldGEuaWQ7ICAgICAgICBcclxuICAgICAgICBjb25zdCB1cmwgPSBbdGhpcy51cmxCYXNlLCBwYXRoLCAnIycsIGhhc2hdLmpvaW4oJycpO1xyXG4gICAgICAgIHJldHVybiBgWyR7dGV4dH1dKCR7dXJsfSlgO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGUobWV0YSwgYWxsb3dMaW5rcz10cnVlKSB7XHJcbiAgICAgICAgbGV0IHJlcyA9IG1ldGEubmFtZTtcclxuICAgICAgICBpZiAobWV0YS50eXBlQXJndW1lbnRzICYmIG1ldGEudHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWxsb3dMaW5rcyAmJiBtZXRhLnR5cGUgPT09ICdyZWZlcmVuY2UnICYmIG1ldGEuaWQpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVmID0gdGhpcy5saW5rVGFibGVbbWV0YS5pZF07XHJcbiAgICAgICAgICAgIHJlcyA9IHRoaXMucmVmKHJlZiwgcmVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICB0eXBlUGFyYW0obWV0YSkge1xyXG4gICAgICAgIGlmICghbWV0YSB8fCBtZXRhLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdHlwZUxpc3QgPSBtZXRhLm1hcChtID0+IG0ubmFtZSkuam9pbignLCAnKTtcclxuICAgICAgICByZXR1cm4gYFxcXFw8JHt0eXBlTGlzdH1cXFxcPmA7XHJcbiAgICB9XHJcblxyXG4gICAgYW55KG1ldGEpIHtcclxuICAgICAgICBzd2l0Y2ggKG1ldGEua2luZCkge1xyXG4gICAgICAgICAgICBjYXNlIHR5cGVzLkZ1bmN0aW9uOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmF0dXJlKG1ldGEuc2lnbmF0dXJlc1swXSk7XHJcbiAgICAgICAgICAgIGNhc2UgdHlwZXMuSW50ZXJmYWNlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJmYWNlKG1ldGEpOyAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdlbkRvY3MobWV0YSk6IERvY0VudGl0eVtdIHtcclxuICAgICAgICBtZXRhLmNoaWxkcmVuLmZvckVhY2gobW9kdWxlID0+IHtcclxuICAgICAgICAgICAgbW9kdWxlLmNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmtUYWJsZVtpdGVtLmlkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGE6IGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZTogbW9kdWxlLm9yaWdpbmFsTmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG1ldGEuY2hpbGRyZW4ubWFwKG1vZHVsZSA9PiAoe1xyXG4gICAgICAgICAgICBwYXRoOiB0aGlzLmdldFBhdGgobW9kdWxlLm9yaWdpbmFsTmFtZSksXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1vZHVsZS5jaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgLm1hcChpdGVtID0+IHRoaXMuYW55KGl0ZW0pKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcblxcbicpXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==